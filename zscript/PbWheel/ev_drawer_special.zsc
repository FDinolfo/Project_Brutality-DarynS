Extend Class PB_SpecialWheelHandler
{
	override void RenderOverlay(RenderEvent e)
	{
		int circleX = 640*0.75;
		int circleY = 480/2;
		let circleTex = TexMan.CheckForTexture("graphics/pywheel/wheel_bg.png",TexMan.Type_MiscPatch);
		let selTex = TexMan.CheckForTexture("graphics/pywheel/sel_bg.png",TexMan.Type_MiscPatch);
		
		if(!searchedSpecials||wheelShow.Size()==0 ||players[0].mo.FindInventory("CantWeaponSpecial"))
		{
			return;
		}
		if(alphaFade==0)
		{
			return;
		}
		
		if(wheelShow.Size()<=0)
		{
			return;
		}
		
		int curSelMod; if (currentSelection >= wheelShow.Size()) { curSelMod = wheelShow[0]; } else { curSelMod = wheelShow[currentSelection]; }
			screen.DrawTexture (circleTex, true, circleX/2, circleY/2, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, 1*alphaFade,DTA_ScaleX, 0.632,DTA_ScaleY,0.632);
		for(int i = 0;i<wheelShow.Size();i++)
		{
			Vector2 textPos = (cos(((double(i+1)/wheelShow.Size())*360)+180)*128, sin((double(i+1)/wheelShow.Size())*360)*128);
			//Console.Printf(""..);
			TextureID specIcon = wheelSpecials[wheelShow[i]].specialIcon;
			int screenPosX = (circleX+textPos.x);//wheelScaleX[i];
			int screenPosY = (circleY+textPos.y);//wheelScaleY[i];
			Vector2 imageScale = TexMan.GetScaledSize(specIcon);
			imageScale.x *= wheelSpecials[wheelShow[i]].iconScale.x;
			imageScale.y *= wheelSpecials[wheelShow[i]].iconScale.y*1.2;
			bool actuallyHas = true;//players[0].mo.FindInventory(wheelSpecials[wheelShow[i]].weaponClass);
			bool noIcon = specIcon==crowbarTex;
			string specName = wheelSpecials[wheelShow[i]].specialAlias;
			
				// Draw base graphic
				screen.DrawTexture(specIcon, true, screenPosX, screenPosY,
					DTA_VirtualWidth, 640, DTA_VirtualHeight, 480,
					DTA_DestWidth, int(imageScale.x), DTA_DestHeight, int(imageScale.y),
					DTA_CenterOffset, true, DTA_TranslationIndex, actuallyHas ? 0 : ( icons_renderstyle==Style_Translucent ? Translation.GetID('darkenwep') : 0 ),
					DTA_Alpha, actuallyHas ? icons_alpha[APS_Normal]*alphaFade : icons_alpha[APS_Inactive]*alphaFade, DTA_LegacyRenderStyle, icons_renderstyle);
					
				if(noIcon)
				{
					screen.DrawText (SmallFont, Font.CR_UNTRANSLATED, screenPosX-SmallFont.StringWidth(specName)/2, screenPosY, specName, DTA_VirtualWidth, 640, DTA_VirtualHeight, 480, DTA_Alpha, actuallyHas ? 1.0*alphaFade : 0.0);
				}
				if(i==currentSelection)
				{
					screen.DrawTexture(specIcon, true, screenPosX, screenPosY,
					DTA_VirtualWidth, 640, DTA_VirtualHeight, 480,
					DTA_DestWidth, int(imageScale.x), DTA_DestHeight, int(imageScale.y),
					DTA_CenterOffset, true, DTA_TranslationIndex, icons_renderstyle==Style_Translucent ? Translation.GetID('lightenwep') : 0,
					DTA_Alpha, 0.75*alphaFade, DTA_LegacyRenderStyle, icons_renderstyle);
					screen.DrawText (SmallFont, Font.CR_WHITE, screenPosX-SmallFont.StringWidth(specName)/2, screenPosY, specName, DTA_VirtualWidth, 640, DTA_VirtualHeight, 480, DTA_Alpha, actuallyHas&&noIcon ? 1.0*alphaFade : 0.0);
				}
			
			//screen.DrawText (SmallFont, Font.CR_UNTRANSLATED, circleX+textPos.x-SmallFont.StringWidth(wepName)/2, circleY+textPos.y, wepName, DTA_VirtualWidth, 640, DTA_VirtualHeight, 480);
			
		}
		circleX/=2;
		circleY/=2;
		//int curSelMod = wheelShow[currentSelection];
		Font fnt = "SmallFont";
		if( true )
		{
			string specName = StringTable.Localize(wheelSpecials[curSelMod].specialAlias);
			BrokenLines mMessage = fnt.BreakLines(specName, 90);//.GetTag();
			if(mMessage!=NULL)
			{
				int c = mMessage.Count();
				int y = 0-(fnt.GetHeight()*c)/2;
				for (int i = 0; i < c; i++)
				{
					if(mMessage.StringAt(i).Length()<1)
					{
						y+=fnt.GetHeight()/2;
					}
				}
				for (int i = 0; i < c; i++)
				{
					screen.DrawText (fnt, Font.CR_UNTRANSLATED, circleX-fnt.StringWidth(mMessage.StringAt(i))/2, y+circleY, mMessage.StringAt(i), DTA_VirtualWidth,320,DTA_VirtualHeight,240, DTA_Alpha, 1.0*alphaFade);
					y += fnt.GetHeight();
					if(mMessage.StringAt(i).Length()<1)
					{
						y-=fnt.GetHeight()/2;
					}
				}
			}
		}
		else
		{
			screen.DrawText (SmallFont, Font.CR_BLACK, circleX-SmallFont.StringWidth("???")/2, circleY-fnt.GetHeight()/2, "???", DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, 1.0*alphaFade);
		}
		
		//screen.DrawTexture(TexMan.CheckForTexture("UNKNA0",TexMan.Type_MiscPatch), true, circleX+realMouse.x*0.8, circleY+realMouse.y*0.8, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_CenterOffset, true, DTA_Alpha, 0.5);
		screen.DrawTexture (selTex, true, circleX+realMouse.x*0.8, circleY+realMouse.y*0.8, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, 0.5*alphaFade);//, DTA_DestWidth, 32, DTA_DestHeight, 32);
		screen.DrawTexture (selTex, true, circleX+fakeMouse.x*0.8, circleY+fakeMouse.y*0.8, DTA_VirtualWidth, 320, DTA_VirtualHeight, 240, DTA_Alpha, 0.5*alphaFade/*, DTA_DestWidth, 32, DTA_DestHeight, 32*/, DTA_TranslationIndex, Translation.GetID('reddenwep'));
		//screen.DrawText (SmallFont, Font.CR_BLUE, 0, 0, fakeMouse.x.."", DTA_VirtualWidth, 320, DTA_VirtualHeight, 240);
	}
}


//
//
//

Class PB_SpecialWheel_Mode
{
	string specialName;
	string specialAlias;
	TextureID specialIcon;
	Vector2 iconScale;
	int specialPriority;
	bool hidden;
	bool mergeDir;
}

//
//	these hold the info about the weapon wheel icons for their respective weapon
//	

class WheelInfoContainer
{
	virtual void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)	//receives an array and fills it with PB_SpecialWheel_Mode instances, also receives a pointer to the actual player, so it can check for tokens
	{
		if(!spw || !requester)
			return;
	}
}

Class PB_CarbineWeaponWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		bool dualling = requester.FindInventory("DualWieldingCarbines");
		
		vector2 iconScale = (0.5, 0.5);
		
		if(!dualling)
		{
			PB_SpecialWheel_Mode carbine_dualwield = new ("PB_SpecialWheel_Mode");
			carbine_dualwield.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Carbine_Dual.png",TexMan.Type_Any);
			carbine_dualwield.specialName = "SelectCarbine_DualWield";
			carbine_dualwield.specialAlias = "Akimbo Carbines";
			carbine_dualwield.specialPriority = 1;
			carbine_dualwield.iconScale = iconScale;
			spw.Push(carbine_dualwield);
		}
		else
		{
			PB_SpecialWheel_Mode carbine_dualwield = new ("PB_SpecialWheel_Mode");
			carbine_dualwield.specialIcon = TexMan.CheckForTexture("sprites/weapons/Slot 4/Carbine/CB00Z0.png",TexMan.Type_Any);
			carbine_dualwield.specialName = "SelectCarbine_DualWield";
			carbine_dualwield.specialAlias = "Single Carbine";
			carbine_dualwield.specialPriority = 1;
			carbine_dualwield.iconScale = iconScale;
			spw.Push(carbine_dualwield);
		}
		
		PB_SpecialWheel_Mode carbine_fullauto = new ("PB_SpecialWheel_Mode");
		carbine_fullauto.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Carbine_Auto.png",TexMan.Type_Any);
		carbine_fullauto.specialName = "SelectCarbine_FullAutoFire";
		carbine_fullauto.specialAlias = "Toggle Full-Auto Fire";
		carbine_fullauto.specialPriority = 2;
		carbine_fullauto.iconScale = iconScale;
		
		PB_SpecialWheel_Mode carbine_burst = new ("PB_SpecialWheel_Mode");
		carbine_burst.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Carbine_Semi.png",TexMan.Type_Any);
		carbine_burst.specialName = "SelectCarbine_SemiFire";
		carbine_burst.specialAlias = "Toggle Semi-Auto Fire";
		carbine_burst.specialPriority = 3;
		carbine_burst.iconScale = iconScale;
				
		PB_SpecialWheel_Mode carbine_semi = new ("PB_SpecialWheel_Mode");
		carbine_semi.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Carbine_Burst.png",TexMan.Type_Any);
		carbine_semi.specialName = "SelectCarbine_BurstFire";
		carbine_semi.specialAlias = "Toggle Burst Fire";
		carbine_semi.specialPriority = 4;
		carbine_semi.iconScale = iconScale;	
		
		spw.Push(carbine_fullauto);
		spw.Push(carbine_burst);
		spw.Push(carbine_semi);
	}
}

class PB_pistolWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
		
		vector2 iconScale = (0.75, 0.75);
		
		//check suppresor
		if(requester.FindInventory("SilencerEquipped"))
		{
			PB_SpecialWheel_Mode pistol_unsilenced = new ("PB_SpecialWheel_Mode");
			pistol_unsilenced.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_5.png",TexMan.Type_Any);
			pistol_unsilenced.specialName = "SelectPistolSuppressor";
			pistol_unsilenced.specialAlias = "Detach Suppressor";
			pistol_unsilenced.specialPriority = 2;
			pistol_unsilenced.iconScale = iconScale;
			spw.Push(pistol_unsilenced);
		}
		else
		{
			PB_SpecialWheel_Mode pistol_silencer = new ("PB_SpecialWheel_Mode");
			pistol_silencer.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_1.png",TexMan.Type_Any);
			pistol_silencer.specialName = "SelectPistolSuppressor";
			pistol_silencer.specialAlias = "Attach Suppressor";
			pistol_silencer.specialPriority = 0;
			pistol_silencer.iconScale = iconScale;
			spw.Push(pistol_silencer);
		}
		
		//check dw
		if(requester.FindInventory("DualWieldingPistols"))
		{
			PB_SpecialWheel_Mode pistol_single = new ("PB_SpecialWheel_Mode");
			pistol_single.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_0.png",TexMan.Type_Any);
			pistol_single.specialName = "SelectDualWieldPistols";
			pistol_single.specialAlias = "Single Pistol";
			pistol_single.specialPriority = 1;
			pistol_single.iconScale = iconScale;
			spw.Push(pistol_single);
		}
		else
		{
			PB_SpecialWheel_Mode pistol_dual = new ("PB_SpecialWheel_Mode");
			pistol_dual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_4.png",TexMan.Type_Any);
			pistol_dual.specialName = "SelectDualWieldPistols";
			pistol_dual.specialAlias = "Akimbo Pistols";
			pistol_dual.specialPriority = 3;
			pistol_dual.iconScale = iconScale;
			spw.Push(pistol_dual);
		}
		
		//check burst
		if(requester.FindInventory("ToggledPistolBurstFire"))
		{
			PB_SpecialWheel_Mode pistol_semi = new ("PB_SpecialWheel_Mode");
			pistol_semi.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_3.png",TexMan.Type_Any);
			pistol_semi.specialName = "SelectPistolBurstFire";
			pistol_semi.specialAlias = "Semi Fire";
			pistol_semi.specialPriority = 5;
			pistol_semi.iconScale = iconScale;
			spw.Push(pistol_semi);
		}
		else
		{
			PB_SpecialWheel_Mode pistol_burst = new ("PB_SpecialWheel_Mode");
			pistol_burst.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_2.png",TexMan.Type_Any);
			pistol_burst.specialName = "SelectPistolBurstFire";
			pistol_burst.specialAlias = "Burst Fire";
			pistol_burst.specialPriority = 4;
			pistol_burst.iconScale = iconScale;
			spw.Push(pistol_burst);
		}
	
	}
}

Class PB_SGLWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.5, 0.5);
		
		PB_SpecialWheel_Mode grenade_impact = new ("PB_SpecialWheel_Mode");
		grenade_impact.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_impact.png",TexMan.Type_Any);
		grenade_impact.specialName = "GrenadeTypeImpact";
		grenade_impact.specialAlias = "Frag Grenade";
		grenade_impact.specialPriority = 1;
		grenade_impact.iconScale = iconScale;
		PB_SpecialWheel_Mode grenade_sticky = new ("PB_SpecialWheel_Mode");
		grenade_sticky.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_sticky.png",TexMan.Type_Any);
		grenade_sticky.specialName = "GrenadeTypeSticky";
		grenade_sticky.specialAlias = "Sticky Bomb";
		grenade_sticky.specialPriority = 2;
		grenade_sticky.iconScale = iconScale;
		PB_SpecialWheel_Mode grenade_incendiary = new ("PB_SpecialWheel_Mode");
		grenade_incendiary.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_incendiary.png",TexMan.Type_Any);
		grenade_incendiary.specialName = "GrenadeTypeIncendiary";
		grenade_incendiary.specialAlias = "Incendiary Grenade";
		grenade_incendiary.specialPriority = 3;
		grenade_incendiary.iconScale = iconScale;
		PB_SpecialWheel_Mode grenade_cryo = new ("PB_SpecialWheel_Mode");
		grenade_cryo.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_cryo.png",TexMan.Type_Any);
		grenade_cryo.specialName = "GrenadeTypeCryo";
		grenade_cryo.specialAlias = "Cryogenic Grenade";
		grenade_cryo.specialPriority = 4;
		grenade_cryo.iconScale = iconScale;
		PB_SpecialWheel_Mode grenade_acid = new ("PB_SpecialWheel_Mode");
		grenade_acid.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_acid.png",TexMan.Type_Any);
		grenade_acid.specialName = "GrenadeTypeAcid";
		grenade_acid.specialAlias = "Acid Grenade";
		grenade_acid.specialPriority = 5;
		grenade_acid.iconScale = iconScale;

		spw.Push(grenade_impact);
		spw.Push(grenade_sticky);
		spw.Push(grenade_incendiary);
		spw.Push(grenade_cryo);
		spw.Push(grenade_acid);
	}
}


Class PB_SMGWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.5, 0.5);
			
		if(!requester.FindInventory("DualWieldingSMGs")) 
		{
			PB_SpecialWheel_Mode smg_dualwield = new ("PB_SpecialWheel_Mode");
			smg_dualwield.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SMG/SMG_DUAL.png",TexMan.Type_Any);
			smg_dualwield.specialName = "SelectDualWieldSMG";
			smg_dualwield.specialAlias = "Akimbo SMGs";
			smg_dualwield.specialPriority = 1;
			smg_dualwield.iconScale = iconScale;
			spw.Push(smg_dualwield);
		}
		else 
		{
			PB_SpecialWheel_Mode smg_dualwield = new ("PB_SpecialWheel_Mode");
			smg_dualwield.specialIcon = TexMan.CheckForTexture("sprites/weapons/Slot 2/UACSMG/Pickup/ATFLA0.png",TexMan.Type_Any);
			smg_dualwield.specialName = "SelectDualWieldSMG";
			smg_dualwield.specialAlias = "Single SMG";
			smg_dualwield.specialPriority = 1;
			smg_dualwield.iconScale = iconScale;
			spw.Push(smg_dualwield);
		}
		if(!requester.FindInventory("LaserSightActivated")) 
		{
			PB_SpecialWheel_Mode smg_laser = new ("PB_SpecialWheel_Mode");
			smg_laser.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SMG/SMG_LASER.png",TexMan.Type_Any);
			smg_laser.specialName = "SelectLaserSight";
			smg_laser.specialAlias = "Activate Laser Sight";
			smg_laser.specialPriority = 2;
			smg_laser.iconScale = iconScale;
			spw.Push(smg_laser);
		}
		else 
		{
			PB_SpecialWheel_Mode smg_laser = new ("PB_SpecialWheel_Mode");
			smg_laser.specialIcon = TexMan.CheckForTexture("sprites/weapons/Slot 2/UACSMG/Pickup/ATFLA0.png",TexMan.Type_Any);
			smg_laser.specialName = "SelectLaserSight";
			smg_laser.specialAlias = "Deactivate Laser Sight";
			smg_laser.specialPriority = 2;
			smg_laser.iconScale = iconScale;
			spw.Push(smg_laser);
		}
	}
}

Class PB_RifleWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.55, 0.55);
		
		// Check Dual Wield Icons
		if(requester.FindInventory("DualWieldingDMRs"))
		{
			PB_SpecialWheel_Mode rifle_single = new ("PB_SpecialWheel_Mode");
			rifle_single.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_single.png",TexMan.Type_Any);
			rifle_single.specialName = "SelectDualWieldRifles";
			rifle_single.specialAlias = "Single DMR";
			rifle_single.specialPriority = 0;
			rifle_single.iconScale = iconScale;
			spw.Push(rifle_single);
		}
		else 
		{
			PB_SpecialWheel_Mode rifle_dual = new ("PB_SpecialWheel_Mode");
			rifle_dual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_dual.png",TexMan.Type_Any);
			rifle_dual.specialName = "SelectDualWieldRifles";
			rifle_dual.specialAlias = "Akimbo DMRs";
			rifle_dual.specialPriority = 1;
			rifle_dual.iconScale = iconScale;
			spw.Push(rifle_dual);
		}

		if(requester.FindInventory("HDMRGrenadeMode"))
		{
			PB_SpecialWheel_Mode rifle_grenade_off = new ("PB_SpecialWheel_Mode");
			rifle_grenade_off.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_grenade_off.png",TexMan.Type_Any);
			rifle_grenade_off.specialName = "SelectHDMRGrenade";
			rifle_grenade_off.specialAlias = "Aiming Secondary Fire";
			rifle_grenade_off.specialPriority = 2;
			rifle_grenade_off.iconScale = iconScale;
			spw.Push(rifle_grenade_off);
		}
		else 
		{
			PB_SpecialWheel_Mode rifle_grenade_on = new ("PB_SpecialWheel_Mode");
			rifle_grenade_on.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_grenade_on.png",TexMan.Type_Any);
			rifle_grenade_on.specialName = "SelectHDMRGrenade";
			rifle_grenade_on.specialAlias = "Grenade Secondary Fire";
			rifle_grenade_on.specialPriority = 3;
			rifle_grenade_on.iconScale = iconScale;
			spw.Push(rifle_grenade_on);
		}


		if(requester.FindInventory("HDMRSniperMode"))
		{
			PB_SpecialWheel_Mode rifle_normal = new ("PB_SpecialWheel_Mode");
			rifle_normal.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_normal.png",TexMan.Type_Any);
			rifle_normal.specialName = "SelectHDMRMode";
			rifle_normal.specialAlias = "DMR Mode";
			rifle_normal.specialPriority = 4;
			rifle_normal.iconScale = iconScale;
			spw.Push(rifle_normal);
		}
		else 
		{
			PB_SpecialWheel_Mode rifle_sniper = new ("PB_SpecialWheel_Mode");
			rifle_sniper.specialIcon = TexMan.CheckForTexture("graphics/pywheel/hdmr_sniper.png",TexMan.Type_Any);
			rifle_sniper.specialName = "SelectHDMRMode";
			rifle_sniper.specialAlias = "Heavy Sniper Mode";
			rifle_sniper.specialPriority = 5;
			rifle_sniper.iconScale = iconScale;
			spw.Push(rifle_sniper);
		}
	}
}

Class PB_QSGWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.4, 0.4);
			
		if(requester.FindInventory("QuadAkimboMode")) 
		{
			PB_SpecialWheel_Mode qsg_undual = new ("PB_SpecialWheel_Mode");
			qsg_undual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Single.png",TexMan.Type_Any);
			qsg_undual.specialName = "SelectDualWieldQuads";
			qsg_undual.specialAlias = "Single Quad Shotgun";
			qsg_undual.specialPriority = 3;
			qsg_undual.iconScale = iconScale;
			spw.Push(qsg_undual);
		}
		else 
		{
			PB_SpecialWheel_Mode qsg_dual = new ("PB_SpecialWheel_Mode");
			qsg_dual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Dual.png",TexMan.Type_Any);
			qsg_dual.specialName = "SelectDualWieldQuads";
			qsg_dual.specialAlias = "Akimbo Quad Shotguns";
			qsg_dual.specialPriority = 3;
			qsg_dual.iconScale = iconScale;
			spw.Push(qsg_dual);
		}
					
		if(requester.FindInventory("FullBlastMode")) 
		{
			PB_SpecialWheel_Mode qsg_halfnormal = new ("PB_SpecialWheel_Mode");
			qsg_halfnormal.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Half.png",TexMan.Type_Any);
			qsg_halfnormal.specialName = "BlastToggle";
			qsg_halfnormal.specialAlias = "Half Blast";
			qsg_halfnormal.specialPriority = 3;
			qsg_halfnormal.iconScale = iconScale;
			spw.Push(qsg_halfnormal);
		}
		else 
		{
			PB_SpecialWheel_Mode qsg_fullnormal = new ("PB_SpecialWheel_Mode");
			qsg_fullnormal.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Full.png",TexMan.Type_Any);
			qsg_fullnormal.specialName = "BlastToggle";
			qsg_fullnormal.specialAlias = "Full blast";
			qsg_fullnormal.specialPriority = 3;
			qsg_fullnormal.iconScale = iconScale;
			spw.Push(qsg_fullnormal);
		}

		if(requester.FindInventory("BreathMode")) 
		{
			PB_SpecialWheel_Mode qsg_shell = new ("PB_SpecialWheel_Mode");
			qsg_shell.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Shells.png",TexMan.Type_Any);
			qsg_shell.specialName = "BreathToggle";
			qsg_shell.specialAlias = "Shells mode";
			qsg_shell.specialPriority = 3;
			qsg_shell.iconScale = iconScale;
			spw.Push(qsg_shell);
		}
		else 
		{
			PB_SpecialWheel_Mode qsg_demon = new ("PB_SpecialWheel_Mode");
			qsg_demon.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Quad_Demonic.png",TexMan.Type_Any);
			qsg_demon.specialName = "BreathToggle";
			qsg_demon.specialAlias = "Demonic Breath mode";
			qsg_demon.specialPriority = 3;
			qsg_demon.iconScale = iconScale;
			spw.Push(qsg_demon);
		}
	}
}

Class PB_CryoRifleWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.8, 0.8);
			
		PB_SpecialWheel_Mode cryorifle_missile = new ("PB_SpecialWheel_Mode");
		cryorifle_missile.specialIcon = TexMan.CheckForTexture("graphics/pywheel/CryoRifle_Missile.png",TexMan.Type_Any);
		cryorifle_missile.specialName = "FireModeCryoRifleMissile_WW";
		cryorifle_missile.specialAlias = "Ice Missile";
		cryorifle_missile.specialPriority = 1;
		cryorifle_missile.iconScale = iconScale;
		spw.Push(cryorifle_missile);

		PB_SpecialWheel_Mode cryorifle_beam = new ("PB_SpecialWheel_Mode");
		cryorifle_beam.specialIcon = TexMan.CheckForTexture("graphics/pywheel/CryoRifle_Beam.png",TexMan.Type_Any);
		cryorifle_beam.specialName = "FireModeCryoRifleBeam_WW";
		cryorifle_beam.specialAlias = "Ice Beam";
		cryorifle_beam.specialPriority = 2;
		cryorifle_beam.iconScale = iconScale;
		spw.Push(cryorifle_beam);

		PB_SpecialWheel_Mode cryorifle_spear = new ("PB_SpecialWheel_Mode");
		cryorifle_spear.specialIcon = TexMan.CheckForTexture("graphics/pywheel/CryoRifle_Spear.png",TexMan.Type_Any);
		cryorifle_spear.specialName = "FireModeCryoRifleSpear_WW";
		cryorifle_spear.specialAlias = "Ice Spear";
		cryorifle_spear.specialPriority = 3;
		cryorifle_spear.iconScale = (0.6, 0.6);
		spw.Push(cryorifle_spear);

		PB_SpecialWheel_Mode cryorifle_flak = new ("PB_SpecialWheel_Mode");
		cryorifle_flak.specialIcon = TexMan.CheckForTexture("graphics/pywheel/CryoRifle_Flak.png",TexMan.Type_Any);
		cryorifle_flak.specialName = "FireModeCryoRifleFlak_WW";
		cryorifle_flak.specialAlias = "Ice Flak";
		cryorifle_flak.specialPriority = 4;
		cryorifle_flak.iconScale = iconScale;
		spw.Push(cryorifle_flak);
	}
}

Class PB_MinigunWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.8, 0.8);
			
		PB_SpecialWheel_Mode minigun_chaingun = new ("PB_SpecialWheel_Mode");
		minigun_chaingun.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_1.png",TexMan.Type_Any);
		minigun_chaingun.specialName = "SelectMinigun_Chaingun";
		minigun_chaingun.specialAlias = "Chaingun Mode";
		minigun_chaingun.specialPriority = 1;
		minigun_chaingun.iconScale = iconScale;
		spw.Push(minigun_chaingun);

		PB_SpecialWheel_Mode minigun_gatling = new ("PB_SpecialWheel_Mode");
		minigun_gatling.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_2.png",TexMan.Type_Any);
		minigun_gatling.specialName = "SelectMinigun_Gatling";
		minigun_gatling.specialAlias = "Gatling Mode";
		minigun_gatling.specialPriority = 2;
		minigun_gatling.iconScale = iconScale;
		spw.Push(minigun_gatling);


		if(requester.FindInventory("MinigunUpgraded")) 
		{
			PB_SpecialWheel_Mode minigun_triple = new ("PB_SpecialWheel_Mode");
			minigun_triple.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_3.png",TexMan.Type_Any);
			minigun_triple.specialName = "SelectMinigun_Triple";
			minigun_triple.specialAlias = "Triple Rotary Mode";
			minigun_triple.specialPriority = 3;
			minigun_triple.iconScale = iconScale;
			spw.Push(minigun_triple);
		}
	}
}

Class PB_PumpShotgunWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.7, 0.7);
			
		if(requester.FindInventory("DragonBreathUpgrade")) 
		{
			PB_SpecialWheel_Mode shotgun_dragonbreath = new ("PB_SpecialWheel_Mode");
			shotgun_dragonbreath.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SG_DB.png",TexMan.Type_Any);
			shotgun_dragonbreath.specialName = "SelectShotgun_Dragonsbreath";
			shotgun_dragonbreath.specialAlias = "Dragon's Breath Shells";
			shotgun_dragonbreath.specialPriority = 3;
			shotgun_dragonbreath.iconScale = iconScale;
			spw.Push(shotgun_dragonbreath);
		}
		else 
		{
			PB_SpecialWheel_Mode shotgun_No = new ("PB_SpecialWheel_Mode");
			shotgun_No.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SG_NO.png",TexMan.Type_Any);
			shotgun_No.specialName = "SelectShotgun_No";
			shotgun_No.specialAlias = "Not Available";
			shotgun_No.specialPriority = 3;
			shotgun_No.iconScale = iconScale;
			spw.Push(shotgun_No);
		}

		PB_SpecialWheel_Mode shotgun_buckshot = new ("PB_SpecialWheel_Mode");
		shotgun_buckshot.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SG_Buck.png",TexMan.Type_Any);
		shotgun_buckshot.specialName = "SelectShotgun_Buckshot";
		shotgun_buckshot.specialAlias = "Buckshot Shells";
		shotgun_buckshot.specialPriority = 1;
		shotgun_buckshot.iconScale = iconScale;
		
		PB_SpecialWheel_Mode shotgun_slugshot = new ("PB_SpecialWheel_Mode");
		shotgun_slugshot.specialIcon = TexMan.CheckForTexture("graphics/pywheel/SG_Slug.png",TexMan.Type_Any);
		shotgun_slugshot.specialName = "SelectShotgun_Slugshot";
		shotgun_slugshot.specialAlias = "Slug Shells";
		shotgun_slugshot.specialPriority = 2;
		shotgun_slugshot.iconScale = iconScale;

		spw.Push(shotgun_buckshot);
		spw.Push(shotgun_slugshot);
	}
}

Class PB_RocketLauncherWheel : wheelinfocontainer
{
	override void GetSpecials(in out array <PB_SpecialWheel_Mode> spw, actor requester)
	{
		if(!spw || !requester)
			return;
			
		vector2 iconScale = (0.5, 0.5);
			
		PB_SpecialWheel_Mode rocket_standard = new ("PB_SpecialWheel_Mode");
		rocket_standard.specialIcon = TexMan.CheckForTexture("graphics/pywheel/rocket_standard.png",TexMan.Type_Any);
		rocket_standard.specialName = "RocketLauncher_Standard";
		rocket_standard.specialAlias = "Standard Rocket Mode";
		rocket_standard.specialPriority = 1;
		rocket_standard.iconScale = iconScale;
		PB_SpecialWheel_Mode rocket_homing = new ("PB_SpecialWheel_Mode");
		rocket_homing.specialIcon = TexMan.CheckForTexture("graphics/pywheel/rocket_homing.png",TexMan.Type_Any);
		rocket_homing.specialName = "RocketLauncher_Homing";
		rocket_homing.specialAlias = "Lock-On Rocket Mode";
		rocket_homing.specialPriority = 2;
		rocket_homing.iconScale = iconScale;
		PB_SpecialWheel_Mode rocket_laser = new ("PB_SpecialWheel_Mode");
		rocket_laser.specialIcon = TexMan.CheckForTexture("graphics/pywheel/rocket_laser.png",TexMan.Type_Any);
		rocket_laser.specialName = "RocketLauncher_Laser";
		rocket_laser.specialAlias = "Laser Rocket Mode";
		rocket_laser.specialPriority = 3;
		rocket_laser.iconScale = iconScale;

		/*if(requester.FindInventory("RL_ScopeMode")) {
			PB_SpecialWheel_Mode rocket_multi = new ("PB_SpecialWheel_Mode");
			rocket_multi.specialIcon = TexMan.CheckForTexture("graphics/pywheel/multirocket.png",TexMan.Type_Any);
			rocket_multi.specialName = "RocketLauncher_Multi";
			rocket_multi.specialAlias = "Multi Rocket Mode";
			rocket_multi.specialPriority = 3;
			rocket_multi.iconScale = iconScale;
			spw.Push(rocket_multi);
		}
		else 
		{
			PB_SpecialWheel_Mode rocket_scope = new ("PB_SpecialWheel_Mode");
			rocket_scope.specialIcon = TexMan.CheckForTexture("graphics/pywheel/rocketscope.png",TexMan.Type_Any);
			rocket_scope.specialName = "RocketLauncher_Scope";
			rocket_scope.specialAlias = "Scope Mode";
			rocket_scope.specialPriority = 3;
			rocket_scope.iconScale = iconScale;
			spw.Push(rocket_scope);
		}*/

		spw.Push(rocket_standard);
		spw.Push(rocket_homing);
		spw.Push(rocket_laser);
	}
}